"""
Django settings for springboot4oKm0 project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hv(@5b5_6wc)^7jq5n)=cfqari$bitn&6=by^nq8y7m+0+v#3d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'address',
    'orders',
    'cart',
    'news',
    'messagess',
    'exampaper',
    'examquestion',
    'examrecord',
    'kechengxinxi',
    'discusskechengxinxi',
    'kechengziyuanxinxi',
    'discusskechengziyuanxinxi',
    'kechengleixing',
    'xuexijihua',
    'jiaoshi',
    'xuesheng',
    'users',
    'tokens',
    'forum',
    'storeup',
    'group',
    'config',
    'file',
    'common',
    'consultation',
    'letter',
    'channels'
]
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'springboot4oKm0.mymall.PomitionWare'
]

# 跨域配置
CORS_ORIGIN_ALLOW_ALL = True  # 或者 CORS_ORIGIN_WHITELIST 设置允许的域
CORS_ALLOW_CREDENTIALS = True
# 总映射配置
ROOT_URLCONF = 'configs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'configs.wsgi.application'

# 配置 ASGI 应用
ASGI_APPLICATION = 'configs.asgi.application'

# 使用 In-Memory Channel Layer (不支持分布式，只在单机环境下运行)
CHANNEL_LAYERS = {
    'default': {
    'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# 配置 Channels 层（使用 Redis 作为后端，支持分布式websocket）
#CHANNEL_LAYERS = {
#    'default': {
#        'BACKEND': 'channels_redis.core.RedisChannelLayer',
#        'CONFIG': {
#            "hosts": [('127.0.0.1', 6379)],  # Redis 地址
#        },
#    },
#}


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",  # ORM的底层对接pymysql的核心引擎类
        "NAME": "py003",  # 数据库名
        "PORT": 3306,  # 端口
        "HOST": "127.0.0.1",  # 数据库IP
        "USER": "root",  # 账号
        "PASSWORD": "root",  # 密码
        "POOL_OPTIONS": {  # pool表示数据库连接池配置，主要为了节省连接数据库的开销，临时存储数据库连接对象
            "POOL_SIZE": 10,  # 默认情况下，打开的数据库连接对象的数量 [1,2,3,4,5,6,7,8,9,10]
            "MAX_OVERFLOW": 11,  # 负载情况下，允许溢出的连接数量  [11,12,13,14,15,16,17,18,19,20]
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATIC_URL = 'static/'
import os
#
# MEDIA_URL = '/media/upload/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/upload')

STATIC_URL = '/py003/upload/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'media/upload/'),  # 如果有额外的静态文件目录
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
